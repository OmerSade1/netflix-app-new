name: Docker Compose CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Build Docker images one by one
      - name: Build NetflixFrontend Image
        run: |
          docker build -t netflix-frontend:latest -f NetflixFrontend/Dockerfile .

      - name: Build NetflixMovieCatalog Image
        run: |
          docker build -t netflix-movie-catalog:latest -f NetflixMovieCatalog/Dockerfile .

      - name: Build DB Image
        run: |
          docker build -t db:latest -f db/Dockerfile .

      # Start containers
      - name: Start Containers
        run: |
          docker compose up -d

      # Wait for services to be healthy
      - name: Wait for Services
        run: |
          echo "Waiting for services to be ready..."
          sleep 10 # Adjust the sleep time as needed for your services to start

      # Perform a basic health check using curl
      - name: Perform Curl Check
        run: |
          curl -fsSL http://localhost:3000 || exit 1

      # Clean up the containers
      - name: Clean up Containers
        run: |
          echo "Stopping and removing containers..."
          docker compose down

  push-to-ecr-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Checkout the repository again in the new job
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up AWS CLI and ECR login
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Tag and Push Docker Images to ECR
      - name: Push NetflixFrontend Image to ECR
        run: |
          docker tag netflix-frontend:latest ${{ secrets.IMAGE1_REPO_URI }}:latest
          docker push ${{ secrets.IMAGE1_REPO_URI }}:latest

      - name: Push NetflixMovieCatalog Image to ECR
        run: |
          docker tag netflix-movie-catalog:latest ${{ secrets.IMAGE2_REPO_URI }}:latest
          docker push ${{ secrets.IMAGE2_REPO_URI }}:latest

      - name: Push DB Image to ECR
        run: |
          docker tag db:latest ${{ secrets.IMAGE3_REPO_URI }}:latest
          docker push ${{ secrets.IMAGE3_REPO_URI }}:latest

      # SSH into EC2 and deploy
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: 44.211.72.236
          username: ${{ secrets.EC2_USERNAME }}
          script: |
            echo "Pulling new Docker images from ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.IMAGE1_REPO_URI }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.IMAGE2_REPO_URI }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.IMAGE3_REPO_URI }}
            
            # Pull and update all images
            docker pull ${{ secrets.IMAGE1_REPO_URI }}:latest
            docker pull ${{ secrets.IMAGE2_REPO_URI }}:latest
            docker pull ${{ secrets.IMAGE3_REPO_URI }}:latest
            
            # Update and start containers
            docker-compose up -d



      
